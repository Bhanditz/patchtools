package uk.co.thinkofdeath.patchtools.instruction;

import org.objectweb.asm.Opcodes;
import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.MethodNode;
import uk.co.thinkofdeath.patchtools.instruction.instructions.*;

public enum Instruction {
    ANY(null), // Virtual instruction
    LABEL(new LabelInstruction()), // Virtual instruction
    NOP(new SingleInstruction(Opcodes.NOP)),
    PUSH_NULL(new SingleInstruction(Opcodes.ACONST_NULL)),
    // iconst_m1 (push-int)
    // iconst_0 (push-int)
    // iconst_1 (push-int)
    // iconst_2 (push-int)
    // iconst_3 (push-int)
    // iconst_4 (push-int)
    // iconst_5 (push-int)
    // lconst_0 (push-long)
    // lconst_1 (push-long)
    // fconst_0 (push-float)
    // fconst_1 (push-float)
    // fconst_2 (push-float)
    // dconst_0 (push-double)
    // dconst_1 (push-double)
    // bipush (push-int)
    // sipush (push-int)
    PUSH_STRING(new PushStringInstruction()), // Virtual instruction (ldc)
    // ldc (push-*)
    // ldc_w (push-*)
    // ldc2_w (push-*)
    // TODO: iload (load-int)
    // TODO: lload (load-long)
    // TODO: ffoad (load-float)
    // TODO: dfoad (load-double)
    // TODO: afoad (load-object)
    // iload_0 (load-int)
    // iload_1 (load-int)
    // iload_2 (load-int)
    // iload_3 (load-int)
    // lload_0 (load-long)
    // lload_1 (load-long)
    // lload_2 (load-long)
    // lload_3 (load-long)
    // fload_0 (load-float)
    // fload_1 (load-float)
    // fload_2 (load-float)
    // fload_3 (load-float)
    // dload_0 (load-double)
    // dload_1 (load-double)
    // dload_2 (load-double)
    // dload_3 (load-double)
    // aload_0 (load-object)
    // aload_1 (load-object)
    // aload_2 (load-object)
    // aload_3 (load-object)
    // TODO: iaload (array-load-int)
    // TODO: laload (array-load-long)
    // TODO: faload (array-load-float)
    // TODO: daload (array-load-double)
    // TODO: aaload (array-load-object)
    // TODO: baload (array-load-byte)
    // TODO: caload (array-load-char)
    // TODO: saload (array-load-short)
    // TODO: istore (store-int)
    // TODO: lstore (store-long)
    // TODO: fstore (store-float)
    // TODO: dstore (store-double)
    // TODO: astore (store-object)
    // istore_0 (store-int)
    // istore_1 (store-int)
    // istore_2 (store-int)
    // istore_3 (store-int)
    // lstore_0 (store-long)
    // lstore_1 (store-long)
    // lstore_2 (store-long)
    // lstore_3 (store-long)
    // fstore_0 (store-float)
    // fstore_1 (store-float)
    // fstore_2 (store-float)
    // fstore_3 (store-float)
    // dstore_0 (store-double)
    // dstore_1 (store-double)
    // dstore_2 (store-double)
    // dstore_3 (store-double)
    // astore_0 (store-object)
    // astore_1 (store-object)
    // astore_2 (store-object)
    // astore_3 (store-object)
    // TODO: iastore (array-store-int)
    // TODO: lastore (array-store-long)
    // TODO: fastore (array-store-float)
    // TODO: dastore (array-store-double)
    // TODO: aastore (array-store-object)
    // TODO: bastore (array-store-byte)
    // TODO: castore (array-store-char)
    // TODO: sastore (array-store-short)
    // TODO: pop (pop)
    // pop2
    // TODO: dup (dup)
    // TODO: dup_x1 (dup_x)
    // dup_x2 (dup_x)
    // dup (dup)
    // TODO: dup2_x1 (dup2_x)
    // dup2_x2 (dup2_x)
    // TODO: swap (swap)
    // TODO: iadd (add-int)
    // TODO: ladd (add-long)
    // TODO: fadd (add-float)
    // TODO: dadd (add-double)
    // TODO: isub (sub-int)
    // TODO: lsub (sub-long)
    // TODO: fsub (sub-float)
    // TODO: dsub (sub-double)
    // TODO: imul (mul-int)
    // TODO: lmul (mul-long)
    // TODO: fmul (mul-float)
    // TODO: dmul (mul-double)
    // TODO: idiv (div-int)
    // TODO: ldiv (div-long)
    // TODO: fdiv (div-float)
    // TODO: ddiv (div-double)
    // TODO: irem (rem-int)
    // TODO: lrem (rem-long)
    // TODO: frem (rem-float)
    // TODO: drem (rem-double)
    // TODO: ineg (neg-int)
    // TODO: lneg (neg-long)
    // TODO: fneg (neg-float)
    // TODO: dneg (neg-double)
    // TODO: ishl (shift-left-int)
    // TODO: lshl (shift-left-long)
    // TODO: ishr (shift-right-int)
    // TODO: lshr (shift-right-long)
    // TODO: iushr (ushift-right-int)
    // TODO: lushr (ushift-right-long)
    // TODO: iand (and-int)
    // TODO: land (and-long)
    // TODO: ior (or-int)
    // TODO: lor (or-long)
    // TODO: ixor (xor-int)
    // TODO: lxor (xor-long)
    // TODO: iinc (inc)
    // TODO: i2l (convert-int-long)
    // TODO: i2f (convert-int-float)
    // TODO: i2d (convert-int-double)
    // TODO: l2i (convert-long-int)
    // TODO: l2f (convert-long-float)
    // TODO: l2d (convert-long-double)
    // TODO: f2i (convert-float-int)
    // TODO: f2l (convert-float-long)
    // TODO: f2d (convert-float-double)
    // TODO: d2i (convert-double-int)
    // TODO: d2l (convert-double-long)
    // TODO: d2f (convert-double-float)
    // TODO: i2b (convert-int-byte)
    // TODO: i2c (convert-int-char)
    // TODO: i2s (convert-int-short)
    // TODO: lcomp (compare-long)
    // TODO: fcmpl (compare-float)
    // fcmpg (compare-float)
    // TODO: dcmpl (compare-long)
    // dcmpg (compare-long)
    // TODO: lfeq (if-zero)
    // TODO: lfne (if-not-zero)
    // TODO: iflt (if-less-zero)
    // TODO: ifge (if-greater-equal-zero)
    // TODO: ifgt (if-greater-zero)
    // TODO: ifle (if-less-equal-zero)
    // TODO: if_icmpeq (if-equal-int)
    // TODO: if_icmpne (if-not-equal-int)
    // TODO: if_icmplt (if-less-int)
    // TODO: if_icmpge (if-greater-equal-int)
    // TODO: if_icmpgt (if-greater-int)
    // TODO: if_icmple (if-less-equal-int)
    // TODO: if_acmpeq (if-equal-object)
    // TODO: if_acmpne (if-not-equal-object)
    // TODO: jsr (goto)
    // TODO: ret (ret)
    // TODO: tableswitch (switch-table)
    // TODO: lookupswitch (switch-lookup)
    // ireturn (return)
    // lreturn (return)
    // freturn (return)
    // dreturn (return)
    // areturn (return)
    RETURN(new ReturnInstruction()),
    // TODO: getstatic (get-static)
    // TODO: putstatic (put-static)
    // TODO: getfield (get-field)
    // TODO: putfield (put-field)s
    INVOKE_VIRTUAL(new InvokeInstruction(Opcodes.INVOKEVIRTUAL)),
    INVOKE_SPECIAL(new InvokeInstruction(Opcodes.INVOKESPECIAL)),
    INVOKE_STATIC(new InvokeInstruction(Opcodes.INVOKESTATIC)),
    INVOKE_INTERFACE(new InvokeInstruction(Opcodes.INVOKEINTERFACE)),
    // TODO: invokedynamic (invoke-dynamic)
    // TODO: new (new)
    // TODO: newarray (new-array)
    // anewarray (new-array)
    // TODO: arraylength (length-array)
    // TODO: athrow (throw)
    // TODO: checkcast (check-cast)
    // TODO: instanceof (instance-of)
    // TODO: monitorenter (monitor-enter)
    // TODO: monitorexit (monitor-exit)
    // wide
    // TODO: multianewarray (new-array-mutli)
    // TODO: ifnull (if-null)
    // TODO: ifnonnull (if-non-null)
    // goto_w
    // jsr_w
    // breakpoint
    ;

    private final InstructionHandler handler;

    Instruction(InstructionHandler handler) {
        this.handler = handler;
    }

    public InstructionHandler getHandler() {
        return handler;
    }

    public static boolean print(StringBuilder patch, MethodNode method, AbstractInsnNode insn) {
        for (Instruction i : values()) {
            if (i.getHandler() != null
                    && i.getHandler().print(i, patch, method, insn)) {
                return true;
            }
        }
        return false;
    }
}
